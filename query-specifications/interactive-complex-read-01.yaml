workload: Interactive
operation: complex
number: 1
title: Friends with certain name
description: |
  Given a start Person, find Persons with a given first name
  that the start Person is connected to (excluding start Person) by
  at most 3 steps via Knows relationships. Return Persons, including
  summaries of the Persons workplaces and places of study.
parameters:
  - name: Person.id
    type: ID
  - name: Person.firstName
    type: String
result:
  - name: Person.id
    type: ID
  - name: Person.lastName
    type: String
  - name: Person.birthday
    type: Date
  - name: Person.creationDate
    type: DateTime
  - name: Person.gender
    type: String
  - name: Person.browserUsed
    type: String
  - name: Person.locationIP
    type: String
  - name: \{Person.email\}
    type: \{String\}
  - name: \{Person.speaks\}
    type: \{String\}
  - name: Person-isLocatedIn->Place.name
    type: String
  - name: \{Person-studyAt->University.name, Person-studyAt->.classYear, Person-studyAt->University-isLocatedIn->City.name\}
    type: \{<String, 32-bit Integer, String>\}
  - name: \{Person-workAt->Company.name, Person-workAt->.workFrom, Person-workAt->Company-isLocatedIn->Country.name\}
    type: \{<String, 32-bit Integer, String>\}
sort:
  - name: distanceFromPerson
    direction: asc
  - name: Person.lastName
    direction: asc
  - name: Person.id
    direction: asc
limit: 20
#wiki
wiki_choke_points: [1.7, 2.3, 7.1]
#doc
choke_points: [1.3, 2.1, 5.3]
relevance: |
  This query is a representative of a simple navigational query. It looks for paths of length one, two or three through
  the knows relation, starting from a given Person and ending at a Person with a given name. It is interesting for several
  aspects. First, it requires for a complex aggregation, that is, returning the concatenation of universities, companies,
  languages and email information of the person. Second, it tests the ability of the optimizer to move the evaluation of
  sub-queries functionally dependant on the Person, after the evaluation of the top-k. Finally, performance is
  highly sensitive to properly estimating the cardinalities in each transitive path, and paying attention not to explode
  already visited Persons.
