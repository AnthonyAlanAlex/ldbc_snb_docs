workload: Interactive
operation: complex
number: 14
title: Weighted/unweighted paths
description: |
  Given two Persons, find all (unweighted) shortest paths between
  these two Persons, in the subgraph induced by the Knows
  relationship. Then, for each path calculate a weight.  The nodes in
  the path are Persons, and the weight of a path is the sum of
  weights between every pair of consecutive Person nodes in the path.
  The weight for a pair of Persons is calculated such that every
  reply (by one of the Persons) to a Post (by the other Person)
  contributes 1.0, and every reply (by ones of the Persons) to a
  Comment (by the other Person) contributes 0.5. Return all the
  paths with shortest length, and their weights. Do not return any rows
  if there is now path between the two Persons.
parameters:
  - name: person1.id
    type: ID
    description: "`Person1`"
  - name: person2.id
    type: ID
    description: "`Person2`"
result:
  - name: '[Person.id]'
    type: '[ID]'
    description: "`personIdsInPath` -- identifiers representing an ordered sequence of the Persons in the path"
    category: calculated
  - name: weight
    type: 64-bit Float
    category: calculated
    description: "`pathWeight`"
sort:
  - name: weight
    direction: desc
    description: The order of paths with the same weight is unspecified
choke_points: [3.3, 7.2, 7.3]
relevance: |
  This query looks for a variable length path, starting at a given Person and finishing at an another given Person. This
  is a more complex query as not only requires computing the path length, but returning it and computing a weight.
  To compute this weight one must look for smaller sub-queries with paths of length three, formed by the two Persons
  at each step, a Post and a Comment.
